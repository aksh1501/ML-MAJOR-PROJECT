{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Training Notebook","provenance":[],"collapsed_sections":[],"toc_visible":true},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"jYHbhbZqf7go","colab_type":"code","outputId":"938bd45c-3abd-49b2-96fa-fe2a72341d78","executionInfo":{"status":"ok","timestamp":1587288489239,"user_tz":-330,"elapsed":39287,"user":{"displayName":"Purbayan Chatterjee","photoUrl":"","userId":"03950332929399041610"}},"colab":{"base_uri":"https://localhost:8080/","height":122}},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":1,"outputs":[{"output_type":"stream","text":["Go to this URL in a browser: https://accounts.google.com/o/oauth2/auth?client_id=947318989803-6bn6qk8qdgf4n4g3pfee6491hc0brc4i.apps.googleusercontent.com&redirect_uri=urn%3aietf%3awg%3aoauth%3a2.0%3aoob&response_type=code&scope=email%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdocs.test%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive.photos.readonly%20https%3a%2f%2fwww.googleapis.com%2fauth%2fpeopleapi.readonly\n","\n","Enter your authorization code:\n","··········\n","Mounted at /content/drive\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"rLITIFw23WWP","colab_type":"code","colab":{}},"source":["!pip uninstall tensorflow\n","!pip install tensorflow==1.14.0"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Mwv9YlqN3xwB","colab_type":"code","colab":{}},"source":["import tensorflow as tf\n","print(tf.__version__)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Te5ZHDSXBPkt","colab_type":"code","outputId":"798a6e2a-37a2-4f86-ecaa-9b502ee23562","executionInfo":{"status":"ok","timestamp":1587290510280,"user_tz":-330,"elapsed":1695,"user":{"displayName":"Purbayan Chatterjee","photoUrl":"","userId":"03950332929399041610"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["import gym\n","import random\n","import numpy as np\n","from statistics import median, mean\n","from collections import Counter\n","\n","from matplotlib import pyplot as plt\n","from IPython.display import clear_output\n","\n","\n","import keras\n","from keras import models\n","from keras.layers import Dense, Dropout, Input, Flatten\n","from keras.models import Sequential, Model\n","from keras.layers import Dense, Dropout, Activation\n","from keras.optimizers import SGD, Adam\n","from keras.models import load_model\n","\n","from sklearn.model_selection import train_test_split \n","print(tf.__version__)"],"execution_count":21,"outputs":[{"output_type":"stream","text":["1.14.0\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"1OXA-K2xsoG1","colab_type":"code","outputId":"27c09613-6e44-4820-e4b8-0a50a2c2cf5e","executionInfo":{"status":"ok","timestamp":1587290338743,"user_tz":-330,"elapsed":32444,"user":{"displayName":"Purbayan Chatterjee","photoUrl":"","userId":"03950332929399041610"}},"colab":{"base_uri":"https://localhost:8080/","height":119}},"source":["TASK_NUM = 1\n","\n","gym_dir = \"/usr/local/lib/python3.6/dist-packages/gym/envs/classic_control/\"\n","task_dir = \"/content/drive/My Drive/ML Major Project/Question/\"\n","model_dir = \"/content/drive/My Drive/ML Major Project/Models/Purbayan's Models/Task\"+str(TASK_NUM)+\"/\"\n","\n","gym_file = gym_dir+'cartpole.py'\n","task_file = task_dir+'task'+str(TASK_NUM)+'.py'\n","task_file_copy = task_dir+'cartpole.py'\n","\n","model_count = !(ls \"$model_dir\" | wc -l)\n","\n","model_count = ((int)(model_count[0]))//2 + 1\n","\n","model_file = model_dir + 'Model#' + str(model_count) + '.h5'\n","plot_file = model_dir + 'Plot#' + str(model_count) + '.png'\n","model_summary_file =  model_dir + 'ModelSummary#' + str(model_count) + '.txt'\n","\n","!rm \"$gym_file\"\n","!cp \"$task_file\" \"$task_file_copy\"\n","!mv \"$task_file_copy\" \"$gym_dir\"\n","\n","#check for friction (TASK1, TASK2, TASK3)\n","!cat \"$gym_file\" | head -n30 | tail -n2\n","\n","#check for uncommented force error (TASK2, TASK3)\n","!cat \"$gym_file\" | head -n25 | tail -n2\n","\n","#check for uncommented noise (TASK3)\n","!cat \"$gym_file\" | head -n69 | tail -n2"],"execution_count":5,"outputs":[{"output_type":"stream","text":["\t\tself.frictioncart = 5e-4 # AA Added cart friction\n","\t\tself.frictionpole = 2e-6 # AA Added cart friction\n","\t\tself.force_mag = 10.0\n","\t\t#self.force_mag = 10.0*(1+self.np_random.uniform(low=-0.10, high=0.10))\n","\t\tnoise = 0\n","\t\t#noise = self.np_random.uniform(low=-0.10, high=0.10) \n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"akzA5O-yy-ax","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":190},"outputId":"2615f12d-2e3f-485d-cbb4-00bf105bb215","executionInfo":{"status":"ok","timestamp":1587290342747,"user_tz":-330,"elapsed":27171,"user":{"displayName":"Purbayan Chatterjee","photoUrl":"","userId":"03950332929399041610"}}},"source":["!pip install keras-rl"],"execution_count":6,"outputs":[{"output_type":"stream","text":["Requirement already satisfied: keras-rl in /usr/local/lib/python3.6/dist-packages (0.4.2)\n","Requirement already satisfied: keras>=2.0.7 in /usr/local/lib/python3.6/dist-packages (from keras-rl) (2.3.1)\n","Requirement already satisfied: keras-preprocessing>=1.0.5 in /usr/local/lib/python3.6/dist-packages (from keras>=2.0.7->keras-rl) (1.1.0)\n","Requirement already satisfied: pyyaml in /usr/local/lib/python3.6/dist-packages (from keras>=2.0.7->keras-rl) (3.13)\n","Requirement already satisfied: h5py in /usr/local/lib/python3.6/dist-packages (from keras>=2.0.7->keras-rl) (2.10.0)\n","Requirement already satisfied: keras-applications>=1.0.6 in /usr/local/lib/python3.6/dist-packages (from keras>=2.0.7->keras-rl) (1.0.8)\n","Requirement already satisfied: numpy>=1.9.1 in /usr/local/lib/python3.6/dist-packages (from keras>=2.0.7->keras-rl) (1.18.2)\n","Requirement already satisfied: scipy>=0.14 in /usr/local/lib/python3.6/dist-packages (from keras>=2.0.7->keras-rl) (1.4.1)\n","Requirement already satisfied: six>=1.9.0 in /usr/local/lib/python3.6/dist-packages (from keras>=2.0.7->keras-rl) (1.12.0)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"UYARHvr8vcYi","colab_type":"code","colab":{}},"source":["#HYPERPARAMETERS\n","random.seed(69)\n","\n","LR = 1e-3\n","goal_steps = 500\n","score_requirement = 50\n","initial_games = 10000"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"UJeuI8rcf7WF","colab_type":"code","outputId":"0f9530a8-6008-418f-9a4d-185c4a2e9341","executionInfo":{"status":"ok","timestamp":1587290348869,"user_tz":-330,"elapsed":1557,"user":{"displayName":"Purbayan Chatterjee","photoUrl":"","userId":"03950332929399041610"}},"colab":{"base_uri":"https://localhost:8080/","height":139}},"source":["env = gym.make(\"CartPole-v1\")\n","env.reset()"],"execution_count":8,"outputs":[{"output_type":"stream","text":["CartPoleEnv - Version 0.2.0, Noise case: 1\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/gym/logger.py:30: UserWarning: \u001b[33mWARN: Box bound precision lowered by casting to float32\u001b[0m\n","  warnings.warn(colorize('%s: %s'%('WARN', msg % args), 'yellow'))\n","/usr/local/lib/python3.6/dist-packages/gym/logger.py:30: UserWarning: \u001b[33mWARN: Environment '<class 'gym.envs.classic_control.cartpole.CartPoleEnv'>' has deprecated methods '_step' and '_reset' rather than 'step' and 'reset'. Compatibility code invoked. Set _gym_disable_underscore_compat = True to disable this behavior.\u001b[0m\n","  warnings.warn(colorize('%s: %s'%('WARN', msg % args), 'yellow'))\n"],"name":"stderr"},{"output_type":"execute_result","data":{"text/plain":["array([-0.0118782 , -0.04640378,  0.03911478,  0.02467436])"]},"metadata":{"tags":[]},"execution_count":8}]},{"cell_type":"code","metadata":{"id":"2EoASShFC3Cl","colab_type":"code","colab":{}},"source":["def initial_population():\n","    # [OBS, MOVES]\n","    training_data = []\n","    # all scores:\n","    scores = []\n","    # just the scores that met our threshold:\n","    accepted_scores = []\n","    # iterate through however many games we want:\n","    for _ in range(initial_games):\n","        score = 0\n","        # moves specifically from this environment:\n","        game_memory = []\n","        # previous observation that we saw\n","        prev_observation = []\n","        # for each frame in 200\n","        for _ in range(goal_steps):\n","            # choose random action (0 or 1)\n","            #env.render()\n","            action = random.randrange(0,2)\n","            # do it!\n","            observation, reward, done, info = env.step(action)\n","            \n","            # notice that the observation is returned FROM the action\n","            # so we'll store the previous observation here, pairing\n","            # the prev observation to the action we'll take.\n","            if len(prev_observation) > 0 :\n","                game_memory.append([prev_observation, action])\n","            prev_observation = observation\n","            score+=reward\n","            if done: break\n","\n","        # IF our score is higher than our threshold, we'd like to save\n","        # every move we made\n","        # NOTE the reinforcement methodology here. \n","        # all we're doing is reinforcing the score, we're not trying \n","        # to influence the machine in any way as to HOW that score is \n","        # reached.\n","        if score >= score_requirement:\n","            accepted_scores.append(score)\n","            for data in game_memory:\n","                # convert to one-hot (this is the output layer for our neural network)\n","                if data[1] == 1:\n","                    output = [0,1]\n","                elif data[1] == 0:\n","                    output = [1,0]\n","                    \n","                # saving our training data\n","                training_data.append([data[0], output])\n","\n","        # reset env to play again\n","        env.reset()\n","        # save overall scores\n","        scores.append(score)\n","    \n","    # just in case you wanted to reference later\n","    training_data_save = np.array(training_data)\n","    np.save('saved.npy',training_data_save)\n","\n","    # some stats here, to further illustrate the neural network magic!\n","    print('Average accepted score:',mean(accepted_scores))\n","    print('Median score for accepted scores:',median(accepted_scores))\n","    print(Counter(accepted_scores))\n","    #for i in training_data:\n","        #print(i[0])\n","        #print(\"% %\",i[1][0],i[1][1])\n","\n","    return training_data"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"ImBXp44YC3Pk","colab_type":"code","outputId":"190b84c5-fadf-41cb-dacf-c17c7f20ce2b","executionInfo":{"status":"ok","timestamp":1587290360257,"user_tz":-330,"elapsed":5441,"user":{"displayName":"Purbayan Chatterjee","photoUrl":"","userId":"03950332929399041610"}},"colab":{"base_uri":"https://localhost:8080/","height":88}},"source":["training_data = initial_population()"],"execution_count":10,"outputs":[{"output_type":"stream","text":["Average accepted score: 56.8\n","Median score for accepted scores: 54.0\n","Counter({52.0: 5, 50.0: 3, 55.0: 3, 53.0: 2, 58.0: 2, 63.0: 2, 54.0: 2, 65.0: 1, 51.0: 1, 76.0: 1, 57.0: 1, 78.0: 1, 62.0: 1})\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"yikVrf6wQK0f","colab_type":"code","outputId":"88d77f38-b5ef-460a-eeed-a921c206f60f","executionInfo":{"status":"ok","timestamp":1587290360259,"user_tz":-330,"elapsed":3342,"user":{"displayName":"Purbayan Chatterjee","photoUrl":"","userId":"03950332929399041610"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["training_data[0]"],"execution_count":11,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[array([ 0.01233893, -0.13092339, -0.02256537,  0.20962681]), [1, 0]]"]},"metadata":{"tags":[]},"execution_count":11}]},{"cell_type":"code","metadata":{"id":"wI_pAhNQF-xq","colab_type":"code","colab":{}},"source":["X = np.array([i[0] for i in training_data])\n","y = np.array([i[1] for i in training_data])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"2UJlbTwt0YPo","colab_type":"code","colab":{}},"source":["from rl.memory import SequentialMemory\n","from rl.policy import EpsGreedyQPolicy, LinearAnnealedPolicy\n","from rl.agents.dqn import DQNAgent"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"DIX9hZhx0sY1","colab_type":"code","colab":{}},"source":["memory = SequentialMemory(limit=50000, window_length=1)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"BC2Fbi0r0_Fh","colab_type":"code","colab":{}},"source":["policy = LinearAnnealedPolicy(EpsGreedyQPolicy(), attr='eps', value_max=1., value_min=.1, value_test=.05, nb_steps=10000)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"2IChis4lFpzf","colab_type":"code","colab":{}},"source":["def build_model(state_size, num_actions):\n","    input = Input(shape=(1,state_size))\n","    x = Flatten()(input)\n","    x = Dense(16, activation='relu')(x)\n","    x = Dense(16, activation='relu')(x)\n","    x = Dense(16, activation='relu')(x)\n","    output = Dense(num_actions, activation='linear')(x)\n","    model = Model(inputs=input, outputs=output)\n","    print(model.summary())\n","    return model"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"NDQC4ZVC1a1y","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":374},"outputId":"b1bb7c3b-c355-4ca6-9fd1-5a3170f75233","executionInfo":{"status":"ok","timestamp":1587290367215,"user_tz":-330,"elapsed":2079,"user":{"displayName":"Purbayan Chatterjee","photoUrl":"","userId":"03950332929399041610"}}},"source":["state_size = 4\n","num_actions = 2\n","model = build_model(state_size=state_size, num_actions=num_actions)\n","dqn = DQNAgent(model=model, nb_actions=2, memory=memory, nb_steps_warmup=10,\n","               target_model_update=1e-2, policy=policy)"],"execution_count":17,"outputs":[{"output_type":"stream","text":["Model: \"model_1\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","input_1 (InputLayer)         (None, 1, 4)              0         \n","_________________________________________________________________\n","flatten_1 (Flatten)          (None, 4)                 0         \n","_________________________________________________________________\n","dense_1 (Dense)              (None, 16)                80        \n","_________________________________________________________________\n","dense_2 (Dense)              (None, 16)                272       \n","_________________________________________________________________\n","dense_3 (Dense)              (None, 16)                272       \n","_________________________________________________________________\n","dense_4 (Dense)              (None, 2)                 34        \n","=================================================================\n","Total params: 658\n","Trainable params: 658\n","Non-trainable params: 0\n","_________________________________________________________________\n","None\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"9rk5Vqgs4lc9","colab_type":"code","colab":{}},"source":["dqn.compile(optimizer=Adam(lr=1e-3), metrics=['accuracy'])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"7uS_afiJF6-a","colab_type":"code","colab":{}},"source":["# sgd = SGD(lr=0.01, decay=1e-6, momentum=0.9, nesterov=True)\n","# model.compile(loss='categorical_crossentropy', optimizer=sgd, metrics=['accuracy'])\n","\n","# X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 42)\n","# print(X_train.shape,y_train.shape)\n","# print(X_test.shape,y_test.shape)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"LpoPPkhDlI2T","colab_type":"code","colab":{}},"source":["class PlotAcc(keras.callbacks.Callback):\n","  def on_train_begin(self, logs={}):\n","    self.i = 0\n","    self.x = []\n","    self.acc = []\n","    self.val_acc = []\n","    self.loss = []\n","    self.val_loss= []\n","    \n","    self.fig = plt.figure()\n","\n","  def on_epoch_end(self, epoch, logs={}):  \n","    self.x.append(self.i)\n","    self.acc.append(logs.get('accuracy'))\n","    self.val_acc.append(logs.get('val_accuracy'))\n","    self.loss.append(logs.get('loss'))\n","    self.val_loss.append(logs.get('val_loss'))\n","    self.i += 1\n","    \n","    clear_output(wait=True)\n","    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(14, 7))\n","    ax1.plot(self.x, self.acc, label=\"acc\")\n","    ax1.plot(self.x, self.val_acc, label=\"val_acc\")\n","    ax2.plot(self.x, self.loss, label=\"loss\")\n","    ax2.plot(self.x, self.val_loss, label=\"val_loss\")\n","    \n","    ax1.legend()\n","    ax2.legend()\n","    plt.show();\n","\n","  def on_train_end(self, epoch, logs={}):\n","    clear_output(wait=True)\n","    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(14, 7))\n","    ax1.plot(self.x, self.acc, label=\"acc\")\n","    ax1.plot(self.x, self.val_acc, label=\"val_acc\")\n","    ax2.plot(self.x, self.loss, label=\"loss\")\n","    ax2.plot(self.x, self.val_loss, label=\"val_loss\")\n","    \n","    ax1.legend()\n","    ax2.legend()\n","    fig = plt.gcf()\n","    fig.savefig(plot_file)\n","\n","    print(\"Train Acc: \", self.acc[-1])\n","    print(\"Val Acc: \", self.val_acc[-1])\n","    print(\"Train Loss: \", self.loss[-1])\n","    print(\"Val Loss: \", self.val_loss[-1])\n","        \n","plot_acc = PlotAcc()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"5HKxbE0Ix9UE","colab_type":"code","outputId":"fb87c40d-5b85-4bea-cf34-e3018cb99057","executionInfo":{"status":"ok","timestamp":1587292721398,"user_tz":-330,"elapsed":602826,"user":{"displayName":"Purbayan Chatterjee","photoUrl":"","userId":"03950332929399041610"}},"colab":{"base_uri":"https://localhost:8080/","height":785}},"source":["history = dqn.fit(env=env, nb_steps=100000, verbose=1)"],"execution_count":30,"outputs":[{"output_type":"stream","text":["Training for 100000 steps ...\n","Interval 1 (0 steps performed)\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:422: The name tf.global_variables is deprecated. Please use tf.compat.v1.global_variables instead.\n","\n","    1/10000 [..............................] - ETA: 23:50 - reward: 1.0000"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/rl/memory.py:39: UserWarning: Not enough entries to sample without replacement. Consider increasing your warm-up phase to avoid oversampling!\n","  warnings.warn('Not enough entries to sample without replacement. Consider increasing your warm-up phase to avoid oversampling!')\n"],"name":"stderr"},{"output_type":"stream","text":["10000/10000 [==============================] - 62s 6ms/step - reward: 1.0000\n","275 episodes - episode_reward: 36.062 [8.000, 216.000] - loss: 2.675 - accuracy: 0.594 - mean_q: 43.465 - mean_eps: 0.550\n","\n","Interval 2 (10000 steps performed)\n","10000/10000 [==============================] - 60s 6ms/step - reward: 1.0000\n","106 episodes - episode_reward: 94.679 [20.000, 299.000] - loss: 6.436 - accuracy: 0.656 - mean_q: 99.357 - mean_eps: 0.100\n","\n","Interval 3 (20000 steps performed)\n","10000/10000 [==============================] - 59s 6ms/step - reward: 1.0000\n","76 episodes - episode_reward: 131.882 [21.000, 500.000] - loss: 11.291 - accuracy: 0.649 - mean_q: 117.361 - mean_eps: 0.100\n","\n","Interval 4 (30000 steps performed)\n","10000/10000 [==============================] - 59s 6ms/step - reward: 1.0000\n","67 episodes - episode_reward: 145.507 [24.000, 500.000] - loss: 36.211 - accuracy: 0.655 - mean_q: 230.017 - mean_eps: 0.100\n","\n","Interval 5 (40000 steps performed)\n","10000/10000 [==============================] - 59s 6ms/step - reward: 1.0000\n","22 episodes - episode_reward: 461.000 [89.000, 500.000] - loss: 37.116 - accuracy: 0.652 - mean_q: 237.828 - mean_eps: 0.100\n","\n","Interval 6 (50000 steps performed)\n","10000/10000 [==============================] - 59s 6ms/step - reward: 1.0000\n","31 episodes - episode_reward: 325.419 [20.000, 500.000] - loss: 33.264 - accuracy: 0.643 - mean_q: 196.204 - mean_eps: 0.100\n","\n","Interval 7 (60000 steps performed)\n","10000/10000 [==============================] - 61s 6ms/step - reward: 1.0000\n","123 episodes - episode_reward: 81.593 [10.000, 500.000] - loss: 74.557 - accuracy: 0.597 - mean_q: 205.580 - mean_eps: 0.100\n","\n","Interval 8 (70000 steps performed)\n","10000/10000 [==============================] - 60s 6ms/step - reward: 1.0000\n","104 episodes - episode_reward: 93.942 [13.000, 486.000] - loss: 125.496 - accuracy: 0.596 - mean_q: 282.834 - mean_eps: 0.100\n","\n","Interval 9 (80000 steps performed)\n","10000/10000 [==============================] - 60s 6ms/step - reward: 1.0000\n","35 episodes - episode_reward: 290.686 [17.000, 500.000] - loss: 131.789 - accuracy: 0.673 - mean_q: 316.590 - mean_eps: 0.100\n","\n","Interval 10 (90000 steps performed)\n","10000/10000 [==============================] - 59s 6ms/step - reward: 1.0000\n","done, took 599.597 seconds\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"by--zbmzBurl","colab_type":"code","colab":{}},"source":["import pickle"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"SctYYIzbBQW8","colab_type":"code","colab":{}},"source":["with open('trainHistoryDict', 'wb') as file_pi:\n","        pickle.dump(history.history, file_pi)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"k67zdedvnbSP","colab_type":"code","outputId":"676b0b00-4019-43f7-b75e-bbdcd37b741b","executionInfo":{"status":"ok","timestamp":1587292879162,"user_tz":-330,"elapsed":1898,"user":{"displayName":"Purbayan Chatterjee","photoUrl":"","userId":"03950332929399041610"}},"colab":{"base_uri":"https://localhost:8080/","height":357}},"source":["model.summary()"],"execution_count":35,"outputs":[{"output_type":"stream","text":["Model: \"model_1\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","input_1 (InputLayer)         (None, 1, 4)              0         \n","_________________________________________________________________\n","flatten_1 (Flatten)          (None, 4)                 0         \n","_________________________________________________________________\n","dense_1 (Dense)              (None, 16)                80        \n","_________________________________________________________________\n","dense_2 (Dense)              (None, 16)                272       \n","_________________________________________________________________\n","dense_3 (Dense)              (None, 16)                272       \n","_________________________________________________________________\n","dense_4 (Dense)              (None, 2)                 34        \n","=================================================================\n","Total params: 658\n","Trainable params: 658\n","Non-trainable params: 0\n","_________________________________________________________________\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"Sz8QwoKmnWD7","colab_type":"code","colab":{}},"source":["model.save(model_file)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"sg9jAtcI0EDQ","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]}]}